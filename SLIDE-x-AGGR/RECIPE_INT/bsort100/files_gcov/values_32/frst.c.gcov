        -:    0:Source:/home/ubuntu/Desktop/SLIDE-x-Repository/SLIDE-x/SLIDE-x-BENCH/RECIPE/bsort100/frst.c
        -:    0:Graph:frst.gcno
        -:    0:Data:frst.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* bsort100.c */
        -:    2:
        -:    3:#include <stdint.h>
        -:    4:#include <values.h>
        -:    5:
        -:    6:typedef int64_t TARGET_TYPE;
        -:    7:typedef uint8_t TARGET_INDEX;
        -:    8:
        -:    9:/* BUBBLESORT BENCHMARK PROGRAM:
        -:   10: * This program tests the basic loop constructs, integer comparisons,
        -:   11: * and simple array handling of compilers by sorting 10 arrays of
        -:   12: * randomly generated integers.
        -:   13: */
        -:   14:
function swap called 0 returned 0% blocks executed 0%
    #####:   15:void swap(TARGET_INDEX index_1, TARGET_INDEX index_2)
        -:   16:{
    #####:   17:	TARGET_TYPE b = a[index_1];
    #####:   18:	a[index_1] = a[index_2];
    #####:   19:	a[index_2] = b;
    #####:   20:}
        -:   21:
function bsort100 called 1 returned 100% blocks executed 75%
        1:   22:void bsort100()
        -:   23:{
        -:   24:/*
        -:   25: * Sorts an array of integers of size NUMELEMS in ascending order.
        -:   26: */
        -:   27:	TARGET_INDEX i;
        -:   28:	TARGET_TYPE j;
        -:   29:	TARGET_TYPE is_sorted;
        -:   30:	TARGET_TYPE currentSwap; 
        1:   31:	TARGET_TYPE lastSwap = size-1;
        -:   32:
        2:   33:	for(j = 0;
unconditional  0 taken 1
branch  1 taken 1
branch  2 taken 0 (fallthrough)
        -:   34:		j < size;
    #####:   35:		j++)
unconditional  0 never executed
        -:   36:	{
        1:   37:		is_sorted = (TARGET_TYPE) 1;
        1:   38:		currentSwap = -1;
        3:   39:		for(i = 0;
unconditional  0 taken 1
branch  1 taken 1
branch  2 taken 1 (fallthrough)
        2:   40:			i < lastSwap;
        1:   41:			i++)
unconditional  0 taken 1
        -:   42:		{
        1:   43:			if(a[i] > a[i+1])
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:   44:			{
    #####:   45:				swap(i,i+1);
call    0 never executed
    #####:   46:				is_sorted = 0;
    #####:   47:				currentSwap = i;
unconditional  0 never executed
        -:   48:			}
        -:   49:		}
        -:   50:
        1:   51:		if(is_sorted) break;
branch  0 taken 1 (fallthrough)
branch  1 taken 0
unconditional  2 taken 1
    #####:   52:		lastSwap = currentSwap;
        -:   53:	}
        1:   54:}
        -:   55:
function main called 1 returned 100% blocks executed 100%
        1:   56:void main()
        -:   57:{
        1:   58:	bsort100();
call    0 returned 1
        1:   59:}
